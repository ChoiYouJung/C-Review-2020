Chapter2. C++프로그래밍의 기본
2.1. C++프로그램의 기본 요소와 화면 출력
1) main함수
- C언어와 마찬가지로 main함수는 C++프로그램의 실행 시작점이다.
- C++프로그램에는 반드시 하나의 main() 함수가 존재해야하며, main 함수가 종료하면 프로그램이 종료된다.
- main() 함수의 표준 형식
ANSI C++표준에서 정한 main() 함수의 리턴 타입은 다음과 같이 int이다.

int main()
{
   
	return 0;
}

- 간혹 다음과 같이 void를 리턴 타입으로 선언하기도 하는데, 이것은 C++표준이 아니다.

void main()
{

}

- 한편,  int main() 함수는 정수를 리턴하는 return문을 가지고 있어야 한다.
  그러나 개발자의 편의를 위해 ANSI C++ 표준에서 main()함수에 대해서만 예외적으로 return문을 생략할 수 있도록 하였다.
  return문이 생략되면 main()이 종료할 때 자동으로 다음 문이 실행된다. 

- main()함수가 return한 정수값은 누구에게 전달되는가?
=> 
(1) 부모 프로그램은 자식 프로그램의 main()함수에서 리턴한 정수값을 알아내는 함수를 통해, 
    자식프로그램의 종료 상태를 알게된다. 
(2) 이를 위해서는 프로그램의 설계 단계, 리턴하는 정수 값의 의미를 정한다. 
(3) 개발자가 응용프로그램을 부모 자식으로 나누어 작성하지 않는 경우 
    모든 프로그램의 부모는 운영체제이며, 운영체제와 응용프로그램 사이에 특별한 종료 관계가 설정되어 있지 않기 때문에,
    응용프로그램이 0이 아닌 다른 정수를 리턴한다고 하더라도 아무 의미가 없다.

2) #include<iostream>
- 이 문장은 전처리기(C++ Preprocessor)에 대한 지시문으로서, C++소스 파일(.cpp)을 컴파일하기 전에 <iostream> 헤더 파일을 읽어 C++소스파일 안에 삽입할 것을 지시한다.
- C++컴파일러는 처음에 전차리기를 호출하여 #include로 된 라인을 모두 처리하도록 한 후, C++소스파일을 컴파일한다.
- 뒷부분에서 #include에 대해 자세히 설명한다.
- <iostream>헤더 파일에는 C++표준 입출력을 위한 클래스와 객체가 선언되어 있으므로, 키보드 입력이나 화면 출력을 위해서는 꼭 필요하다.
  ex) cout객체와 <<연산자 함수는 <iostream>에 선언되어있다.

3) 화면 출력
- C++에서는 cout과 <<연산자를 이용하여 문자열뿐만 아니라 다양한 데이터를 화면에 출력한다.
std::cout<<"Hello"\n";
std::cout<<"첫 번째 맛보기입니다.";

- cout 객체
cout은 스크린 장치와 연결된 C++표준 출력 스트림 객체(standard output stream object)이다.
cout은 C++프로그램에서 출력한 데이터를 자신과 연결된 스크린에 대신 출력해준다.
cout 앞에 붙여진 std::의 접두어는 cout의 이름 공간(namespace)이 std임을 표시한다.
뒷부분에 이름공간과 std에 대해 설명한다.
- <<연산자
<<연산자는 스트림 삽입 연산자(stream insertion operation)로 불린다.
오른쪽 피연산자 데이터를 왼쪽 스트림 객체에 삽입한다.
원래 <<연산자는 시프트(shift)하는 C++의 기본 연산자이다.
그러나 출력 스트림에 데이터를 삽입하는 삽입 연산자로 <iostream>헤더 파일에 재정의(operator overloading)되어 cout과 함께 사용된다.

- 여러 개의 <<연산자로 한 문장에 여러 데이터 출력
<<연산자는 왼쪽에서 오른쪽 순서대로 실행된다.
<예시>
std::cout<<"Hello\n"<<"첫 번째 맛보기입니다.";

- cout과 <<연산자 활용
<<연산자는 문자열뿐 아니라 다음과 같은 C++기본 타입 데이터도 출력할 수 있다.
bool, char, short, int, long, float, double

<예시1>
int n = 3;
char c = '#';
std::cout << c << 5.5 << '-' << n << "Hello" << true; //#5.5-3Hello1

<예시2>
std::cout << "n+5" << n+5;
std::cout << f(); //함수 f()의 리턴값 출력

3) 화면에서 다음 줄로 넘어가기
- 화면의 커서를 다음 줄로 넘기기 위해 '\n'문자를 이용한다. 다음의 코드는 "Hello"문자열을 출력하고 커서를 다음 줄로 넘긴다.
std::cout<<"Hello" << '\n'; //Hello를 화면에 출력하고 다음 줄로 넘어감
- '\n'대신 다음과 같이 endl조작자를 사용해도 된다.
std::cout<<"Hello"<<std::endl;
-endl은 C++에서 도입한 조작자(manipulator)라고 불리는 함수

4) '\n' 과 endl 조작자
- std::cout<<'\n'문장은 <<연산자가 '\n'문자를 cout의 스트림 버퍼에 단순히 삽입하고 끝난다.
  그후 cout 스트림 버퍼가 꽉 차거나 강제 출력 지시가 있는 경우, cout은 '\n'을 해석하여 커서를 다음 줄로 넘긴다.
- 한편 endl()은 <iostream>헤더 파일에 작성되어 있는 함수이다. 
  std::cout<<std::endl;이 실행되면, <<연산자가 endl()함수를 호출한다. 
- endl()함수는 '\n'을 cout의 스트림 버퍼에 넣고, cout에게 현재 스트림 버퍼에 있는 데이터를 즉각 장치에 출력하도록 지시한다.
- endl을 사용하면 커서를 다음 줄로 넘기는 것과 동시에 현재 cout의 스트림 버퍼에 있는 모든 데이터를 출력시킨다.
=>\n과 endl조작자는 차이점이 존재한다.

2.2. namespace와 std::
1) namespace
- 예시
현재 우리 아파트 단지에는 '하늘'이라는 사람이 여럿 살고 있다.
그러므로 우리아파트 단지에서 '하늘'를 찾고자 한다면, 몇동에 사는 '하늘이'인지 구분해야한다.
1동에사는 하늘이를 찾기위해 '1동::하늘'을 부르는 모양을 보여준다.   
여기서 '하늘'은 이름이면 '1동'은 이름공간(namespace)이다. 

(1) 일상생활뿐 아니라 c++프로그래밍 과정에서 이름(identified)이 충돌하는 경우가 있다.
(2) 이름 충돌이 발생하는 대표적인 경우
- 프로젝트를 여러 명이 나누어 개발하는 경우
- 다른 사람이 작성한 소스 코드나 목적파일을 가져와서 사용하는 경우
(3) 2003년 ANSI C++표준에서는 여러 프로젝트나 여러 사람들이 작성한 프로그램에서 변수, 함수, 클래스 등의 이름(identifier)이 충돌하는 것을 막기 위해, 개발자가 자신만의 고유한 이름 공간을 생성할 수 있도록 namespace 키워드를 도입하였다.
(4) 서로다른 이름 공간 안에 선언된 이름들은 별개의 이름으로 취급되기 때문에, 각 개발자가 자신만의 이름 공간을 사용하면 이름의 충돌을 막을 수 있다.
(5) 이름공간(namespace)을 생성하는 방법
<예시>
namespace jane{ //jane이라는 이름 공간 생성

}
(6) 이름공간의 기본형태
이름공간(namespace) :: 이름(identifier)

* 추가! ::는 범위 지정 연산자로서 C++표준 연산자이다.

2) std::
(1) std는 2003년 ANSI C++표준에서 정한 표준 이름 공간으로서, 모든 C++ 표준 라이브러리는 std 이름공간에 만들어져 있다.
    그러므로 응용 프로그램이 C++표준 라이브러리에서 선언된 이름(identifier)을 사용할 때, std::를 접두어로 붙여야 한다.
<예시> std::cout << "Hello" << std::endl;

3) std::의 생략과 using 지시어
(1) std 이름 공간에 선언된 수많은 이름에 대해 사용할 때마다 std:: 접두어를 붙이는 것은 상당히 번거롭다.
(2) using 지시어를 이용하면 이름 공간 접두어를 생략할 수 있다.
<예시1> cout 앞의 std::를 생략하도록 using 지시어를 사용한 사례
using std::cout;

cout << "Hello" << std::endl;

<예시2> std 이름 공간에 선언된 모든 이름에 대해 std::를 생략할 때
using namespace std;

cout<< "Hello" <<endl;   

4) #include <iostream>과 std
(1) ANSI C++표준에서 지원되는 모든 라이브러리는 std 이름 공간 안에 구현되어 있기 때문에 <iostream> 헤더 파일 내에 선언된 모든 클래스, 객체, 함수들을 사용할 때 std::를 생략하려면 다음과 같이 한다.
<예제 소스코드>
 #include <iostream>
using namespace std;

int name(){
	cout<< "Hello\n";
	cout<< "첫번째맛보기입니다.";
	return 0;
} 

2.3. 키 입력 받기
1) 예제소스
// cin과 >>로 키 입력 받기
#include <iostream>
using namespace std;

int main(){
	cout<< "너비를 입력하세요>>";

	int width;
	cin >> width;

	cout << "높이를 입력하세요>>";
	
	int height;
	cin >> height;

	int area = width*height;

	cout<< "면적은" << area << "\n";	
}

2) cin과 >> 연사자를 이용한 키 입력
(1) C++에서는 표준 입력 스트림인 cin과 >> 연산자를 이용하여 사용자로부터 키를 입력받는다.
(2) 모든 기본 타입에 대해 >> 연산자로 데이터 입력이 가능하다.
bool, char, short, int, long, float, double
(3) C++에서는 C언어와 달리 키 입력받는 변수를 다음과 같이 이름 그대로 사용한다.

int width;
cin >> width; //(o)
cint >> & width; //(x)

(4) cin은 여러개의 >> 연산자를 이용하여 여러 값을 입력받을 수도 있다.
(5) >> 연산자들은 왼쪽부터 오른쪽으로 순서대로 키보드로부터 입력받는다.
(6) cin 객체은 키보드와 C++응용프로그램을 연결하는 C++ 표준 입력 스트림 객체(standard input stream object)이다. 
(7) 키보드로 입력되는 값들은 모두 cin 객체의 스트림 버터로 들어오며, 응용프로그램은 cin객체로부터 입력된 키 값을 읽는다.
(8) >>연산자는 스트림 추출 연산자(stream extraction operator)로 불리며 왼쪽 피연산자인 스트림 객체로부터 데이터를 읽어 오른쪽 피연산자에 지정된 변수에 삽입한다.
(9) 스트림 추출 연산자는 본래 정수를 시스트하는 C++의 기본 연산자이지만, <iostream> 헤더 파일에 스트림 추출 연산자로 재정의(operator overloading)되어있다.

3) <Enter>키를 칠 때 변수에 키 값 전달
(1) C++입력 시스템은 사용자의 키 입력이 끝났다는 사실을 어떻게 인식할까? <Enter>키
(2) 사용자가 입력하 키들은 일차적으로 cin의 스트림 버퍼에 저장되며, <Enter>키가 입력되면 비로소 >> 연산자가 cin의 입력 버퍼에서 키 값을 끌어내어 변수에 저장한다.
(3) 키 입력 도중 사용자가 <Backspace>키를 치면, cin의 스트림 버퍼에 입력된 키를 제거할 수 있다.
(4) <Enter>키를 입력하기 전까지는 사용자의 키 입력이 완료된 상태가 아니며, <Enter>키를 입력하여야 >>연산자가 동작한다.

4) 실행문 중간에 변수 선언
(1) C언어에서 모든 변수는 반드시 실행문 전에 선언되어야 하지만, C++에서는 프로그램 어디서나 변수 선언이 가능하다.
<예시>
int width;
cin >> width;

cout << "높이를 입력하세요>>";

int height; // 실행문 중간에 변수 선언
cin >> height;

int area = width*height ; 실행문 중간에 변수 선언
cout << "면적은" <<area << "\n"

(2) 장점 
- C언어로 프로그램을 작성할 때는, 코딩 도중 변수 선언이 필요할 때 함수의 시작부로 스크롤 업(scroll-up)한 후 변수를 선언하고, 다시 코딩 위치로 스크롤 다운(scroll-down)하는 번거로움이 있다. 그러나 C++에서는 이러한 번거로움을 줄일 수 있다.
- 변수를 사용하기 바로 전 라인에 변수를 선언하면, 변수 이름을 잘못 타이핑하는 실수를 줄일 수 있다.

(3) 단점
- 선언된 변수들이 코드 사이에 흩어져 있으므로, 선언된 모든 변수를 한 눈에 보기 힘들고, 코드 사이에서 선언된 변수를 찾기가 용이하지 않다.

2.4. 키보드로 문자열 입력
1) C++의 문자열
(1) C++응요프로그램에서 가장 많이 다루어지는 데이터 중 하나가 문자열이다.
    but! 문자열은 C++의 기본 데이터 타입이 아니다.
(2) C++에서는 다음의 두가지 방법으로 문자열을 표현한다.
C-스트링 - c언어에서 문자열을 표현하는 방법
String 클래스 - 문자열을 객체로 다루는 방법. (권장하는 방법이다.)

2) C-스트링
(1) 널 문자('\0'혹은 0)로 끝나는 char배열을 말하며, C 언어에서 사용하는 문자열 방식이다.
(2) C++에서는 C언어와의 호환성 때문에 C-스트링을 그대로 사용한다.
(3) C스트링 사례
char name1[6] = {'G', 'r', 'a', 'c', 'e', '\n'}; // name1은 문자열 'Grace', C-스트링 문자열
char name2[6] = {'G', 'r', 'a', 'c', 'e'}; // name2는 문자열이 아님. 단순 문자 배열

=> "Grace"는 'G', 'r', 'a', 'c', 'e', '\n'의 6개의 문자들로 구성된 문자열 리터럴(literal)이며, 문자열 리터럴을 직접 배열에 저장하여 다음과 같이 문자열을 만들기도 한다.

char name3[6] = "Grace";
char name4[] = "Grace"; //자동으로 배열의 크기는 6으로 설정됨.

(4) 마지막에 '\n'을 추가하기 위해 배열의 크기는 문자수보다 최소한 1은 커야 하며, 문자수보다도 커도 상관없다.
(5) C++ 응용프로그램은 C-스트링을 다루기 위해 C프로그래밍에서 사용해왔던 strcp(), strcmp(), strlen() 등 C라이브러리 함수들을 그대로 사용할 수 있다.
    이때, <cstring>이나 <string.h>헤더 파일을 include해야한다.
(6) <cstring>헤더 파일은 내부적으로 <string.h>를 include하기 때문에 이 둘은 거의 같은 것으로 볼 수 있지만.
    C++ 표준에 따라 <cstring> 헤더 파일을 include하는 것이 바람직하다.
    또한, visual C++에서 <iostream>만 include 하면 strcpy(), strcmp(), strlen() 등의 C 함수를 사용할 수 있지만, 리눅스 컴파일러 등 다른 컴파일러에서는 안될 수 있으므로, C++표준안을 지키는 것이 바람직하다.

3) cin을 이용한 문자열 입력
<예제>
#include <iostream>
using namespace std;

int main(){
	cout << "이름을 입력하세요>>";
	
	char name[11]; //한글은 5개 글자, 영문은 10까지 저장할 수 있다.
            cin >> name;

	cout << "이름은" << name << "입니다\n";

}

<예제> C- 스트링을 이용하여 암호가 입력되면 프로그램을 종료하는 프로그램
#include <iostream>
using namespace std;

int main(){
	char password[11];
	cout << "프로그램을 종료하려면 암호를 입력하세요." <<endl;
	while(true)
	{
		cout<< "암호>>";
		cin >> password;
		if(strcmp(password,"C++")==0){
			cout<< "프로그램을 정상 종료합니다." <<endl;
			break; 
		}
		else 
			cout<<"암호가 틀립니다."<<endl;

	}

}

4) cin과 >>연산자로 문자열을 입력 받을 때의 주의할 점
(1) >>연산자는 공백 문자(white space character)를 만나면 그 전까지 입력된 문자들을 하나의 문자열로 인식한다.

5) cin.getline()을 이용한 문자열 입력
(1) cin 객체의 getline() 멤버 함수를 이용하면 공백이 포함된 문자열을 입력받을 수 있다.
(2) getline()함수의 원형
cin.getline(char buf[], int size, char delimitChar)
/*
buf : 키보드로부터 읽은 문자열을 저장할 배열
size : buf[]배열의 크기
delimitChar : 문자열 입력 끝을 지정하는 구분 문자
*/
// 최대 size-1의 문자를 입력받거나 delimitChar로 지정된 문자를 만나면 문자열의 입력이 종료된다.
//입력된 문자열은 buf[] 배열에 저장되며, delimitChar로 지정된 문자는 저장되지 않고 cin의 버퍼에서도 사라진다. 그리고 buf[] 배열에 널 문자('\n')가 덧붙여진다.

(2) cin.getline()을 호출하면, delimitChar에 지정된 구분 문자가 입력될 때까지 공백 문자를 포함하여 문자열을 입력 받을 수 있다.
<예시> <Enter>키를 구분 문자로 지정하여 문자열을 입력받는 예
char address[100];
cin.getline(address, 100, '\n');

(3) cin.getline() 함수의 마지막 매개변수 delimitChar는 생략할 수 있다.
=> 디폴트 값이 '\n'이다.

<예제> cin.getline()을 이용한 문자열 입력
#include <iostream>

using namespace std;

int main(){
	cout<< "주소를 입력하세요>>";

	char address[100];
	cin.getline(address, 100, '\n');

	cout<< "주소는" << address << "입니다\n";
}

* 공백 문자(white space character)란?
- 공백 문자란 단어나 줄 사이에 사용자가 읽기 쉽도록 삽입하는 문자로서, c++ 표준에서는 빈칸(' '), 탭('\t'), 다음 줄로 넘어가기('\n'), 캐리지 리턴('\r'), 폼피드('\f'), 수직 탭('\v')문자들을 말한다.
- 공백 문자인지 판단하기 위해 다음 함수를 이용하면 된다.
int isspace(char c) //c가 공백문자이면 true(0이 아닌 정수)리턴

6) string 클래스
(1) C++ 표준 라이브러리에서 제공하는 클래스를 사용하는 방법
(2) 이 방법이 좋은 이유는? 
C-스트링은 배열의 크기에 의해 문자열의 크기가 고정되는 불편함이 있지만, string 클래스를 이용하는 방법은 객체 지향적일 뿐만 아니라, C-스트링 방식보다 문자열을 다루기 쉽다.
또한 Java, C# 등과 같은 다른 언어에서도 string과 유사한 클래스로 문자열을 다루기 때문에, 다른언어를 배우기 쉬워진다.
(3) string클래스는 문자열 복사, 비교, 수정 등 다양한 문자열 연산을 위한 멤버함수와 연산자를 제공하므로, 응용프로그램은 string 객체를 생성하여 쉽게 문자열을 다룰 수 있다.
<예제> string 클래스를 이용한 문자열 입력 및 다루기 
#include <iostream>
#include <string>
using namespace std;

int main()
{
	string song("Falling in love with you");
	string elvis("Elvis Presley");
	string singer;
	
	cout<< song + "를 부른 가수는";
	cout<< "(힌트 : 첫글자는" << elvis[0] << ")?";
	
	getline(cin, singer); //문자열 입력
	if(singer == elvis)
		 cout << "맞았습니다.";
	else	
		 cout << "틀렸습니다." + elvis + "입니다." <<endl; 
   
}


2.5. #include<iostream>의 의미
1) #include<iostream>와 전처리기
(1) C/C++컴파일러는 컴파일 전에 우선 전처리기(processor)를 실행시켜 #include문을 모두 처리한다.
(2) 전처리기는 컴파일러에 의해 내부적으로 호출되므로, 사용자가 전처리기의 실행 여부를 알기는 어렵다.
(3) 전처리기는 #include문에 지정된 <헤더파일>의 텍스트를 #include 문이 있던 그 자리에 삽입한다.
    이를 '헤더 파일의 확장'이라고 말한다.
(4) 만일 <헤더파일> 내에 또 다른 #include하는 문이 내포되어 있으면, 다시 그 자리에 '헤더 파일의 확장'이 일어난다.
(5) 모든 '헤더 파일의 확장'이 완료되면 전처리기는 종료한다.
ex)
iostream 헤더파일(#include<istream>) -> istream 헤더파일(#include<ostream>) -> ostream 헤더파일(#include<ios>)

2) <iostream>헤더파일의 위치
(1) <iostream>헤더 파일은 텍스트 파일로서 컴파일러가 설치된 폴더의 include폴더에 존재한다.

3) <iostream>과 <iostream.h>의 차이
(1) C언어에서 C 표준 라이브러리 헤더 파일의 확장자는 .h이다.
(2) 2003년 이전 버전까지 표준C++에서도 C++표준 라이브러리의 헤더 파일 확자자를 .h로 사용해왔다.
(3) 2003년 이후 버전이후 신 C++표준에서는 구 버전과 구분하기 위해, 헤더 파일에 확자자를 붙이지 않는다.
(4) visual C++ 6.0과 같은 구 버전 컴파일러의 경우 아직 다음과 같이 헤더 파일을 사용한다.
#include<iostream.h>
(5) visual C++ 2003, 2005, 2008, 2010, 2012 등 2003년 이후의 새로운 C++ 컴파일러의 경우 다음과 같이 사용한다.
#include<iostream>
using namespace std;
(6) 현재 visual C++에서는 C라이브러리 함수를 사용하는 경우 다음과 같이 .h확장자를 가진 헤더 파일을 허용하고 있지만 표준이 아닌 것을 기억하고 있어야 한다.
#include<string.h>
(7)
C언어 - 헤더파일 확장자 : .h - 사례 : <string.h> - 설명 : C/C++프로그램에서 사용 가능
구 버전 C++표준 - 헤더파일 확장자 : .h - 사례 : <string.h> - 설명 : 구 버전의 C++ 컴파일러에서 사용
2003년 이후 신 C++ 표준 - 헤더파일 확장자 : 확장자 없음 - 사례 : <cstring> - 설명 : using namespace std와 함께 사용해야함.

4) #include<헤더파일>과 #include "헤더파일"의 차이
(1) #include<헤더파일>과 #include "헤더파일"을 지정할 때 헤더 파일이 존재하는 위치에 따라 달리 사용한다.
(2) #include<헤더파일>
- 컴파일러가 설치된 폴더에서 '헤더파일'을 찾으라는 지시이다.
- 예시 
#include<iostream>
// <iostream>헤더파일의 경우, 컴파일러가 설치된 폴더에 있기 때문에 
(3) #include"헤더파일"
- 개발자의 프로젝트 폴더나 개발자가 컴파일 옵션으로 지정한 include 폴더에서 '헤더 파일'을 찾도록 지시한다.
- 개발자 자신이 만든 헤더 파일을 사용하는 경우 이 방법을 사용해야 한다.
(4) cout과 cin의 위치
- iostream 헤더 파일에 선언된 객체들
- 헤더파일을 열어볼 때 파일을 지우거나 수정되지 않도록 주의해야한다.
- cin은 istream 타입의 객체로 선언
- cout은 ostream타입의 객체로 선언
(5) 추가! wstring
(예제)
#include<iostream>
#include<string>
#include<locale>
using namespace std;

int main()
{
	locale::global(locale("kor"));
	cout<<"로케일은"<<locale().name()<<endl;

	wchar_t wc = L'한';
	wstring wstr = L"Korea한국";
	wstring wkorea = L"大韓民國";

	wcout<<wc<<endl;
	wcout<<wstr<<endl;
	wcout<<wkorea<<endl;

	wstring word;
	wcout<<L"문자열>>";
	wcin >> word;
	wcout << word << endl;	
	
}

